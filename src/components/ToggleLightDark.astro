---
import { Icon } from "astro-icon/components";
---

<button
  id="toggle-theme"
  class="swap swap-rotate"
  aria-label="Toggle light/dark mode"
>
  <span id="toggle-icon-sun" class="swap-on">
    <Icon name="sun" size={30} />
  </span>
  <span id="toggle-icon-moon" class="swap-off">
    <Icon name="moon-stars" size={30} />
  </span>
</button>

<script>
  import { toggleDarkMode, getCurrentThemeMode } from "../scripts/theme";
  const currentTheme = getCurrentThemeMode();
  const isCurrentInDarkMode = currentTheme === "dark";

  function swapButtons(isDarkMode: boolean) {
    const iconMoon = document.getElementById("toggle-icon-moon");
    const iconSun = document.getElementById("toggle-icon-sun");
    const swapOn = "swap-on";
    const swapOff = "swap-off";

    if (isDarkMode) {
      iconMoon?.classList.add(swapOn);
      iconMoon?.classList.remove(swapOff);

      iconSun?.classList.remove(swapOn);
      iconSun?.classList.add(swapOff);
    } else {
      iconSun?.classList.add(swapOn);
      iconSun?.classList.remove(swapOff);

      iconMoon?.classList.remove(swapOn);
      iconMoon?.classList.add(swapOff);
    }
  }

  document.addEventListener("astro:page-load", () => {
    const button = document.getElementById("toggle-theme");

    swapButtons(isCurrentInDarkMode);

    function buttonClickHandler() {
      const newTheme = toggleDarkMode();
      const isDarkMode = newTheme === "dark";

      swapButtons(isDarkMode);
    }

    button?.addEventListener("click", buttonClickHandler);
  });
  document.addEventListener("astro:after-swap", () => {
    swapButtons(isCurrentInDarkMode);
  });
</script>

<style>
  .swap {
    @apply cursor-pointer;
  }

  .swap > * {
    @apply duration-300 ease-out;
    transition-property: transform, opacity;
  }

  .swap-rotate .swap-on,
  .swap-rotate .swap-indeterminate,
  .swap-rotate input:indeterminate ~ .swap-on {
    @apply rotate-45;
  }

  .swap-rotate input:checked ~ .swap-off,
  .swap-active:where(.swap-rotate) .swap-off,
  .swap-rotate input:indeterminate ~ .swap-off {
    @apply -rotate-45;
  }

  .swap-rotate input:checked ~ .swap-on,
  .swap-active:where(.swap-rotate) .swap-on,
  .swap-rotate input:indeterminate ~ .swap-indeterminate {
    @apply rotate-0;
  }

  .swap-flip {
    transform-style: preserve-3d;
    perspective: 16em;
  }
  .swap-flip .swap-on,
  .swap-flip .swap-indeterminate,
  .swap-flip input:indeterminate ~ .swap-on {
    transform: rotateY(180deg);
    backface-visibility: hidden;
    @apply opacity-100;
  }

  .swap-flip input:checked ~ .swap-off,
  .swap-active:where(.swap-flip) .swap-off,
  .swap-flip input:indeterminate ~ .swap-off {
    transform: rotateY(-180deg);
    backface-visibility: hidden;
    @apply opacity-100;
  }

  .swap-flip input:checked ~ .swap-on,
  .swap-active:where(.swap-flip) .swap-on,
  .swap-flip input:indeterminate ~ .swap-indeterminate {
    transform: rotateY(0deg);
  }

  .swap {
    @apply relative inline-grid select-none place-content-center;
  }

  .swap > * {
    @apply col-start-1 row-start-1;
  }

  .swap input {
    @apply appearance-none;
  }

  .swap .swap-on,
  .swap .swap-indeterminate,
  .swap input:indeterminate ~ .swap-on {
    @apply opacity-0;
  }

  .swap input:checked ~ .swap-off,
  .swap-active .swap-off,
  .swap input:indeterminate ~ .swap-off {
    @apply opacity-0;
  }

  .swap input:checked ~ .swap-on,
  .swap-active .swap-on,
  .swap input:indeterminate ~ .swap-indeterminate {
    @apply opacity-100;
  }
</style>
